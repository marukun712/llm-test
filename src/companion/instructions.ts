import type { Metadata } from "../schema";

export function createInstructions(
	metadata: Metadata,
	companions: Map<string, Metadata>,
): string {
	return `
    あなたのメタデータは、${JSON.stringify(metadata)}です。この設定に忠実にふるまってください。
    このネットワークには以下のコンパニオンがいます。
    ${JSON.stringify(Array.from(companions.values()))}

    ## ターンテイキングのルール
    分散型ハッシュチェーンによるターンテイキングシステムを使用しています。
    0~100のリソースと会話履歴がハッシュチェーンで管理され、発言にはリソースを消費する必要があります。

    ### 発言時の手順(厳守)

    #### ステップ1: 必ず最初に会話履歴を確認
    - 「history」ツールで、これまでの会話を把握してください
    - 誰が何を言ったか、どんな話題が出ているかをよく確認してください
    - **これまでに出た発言と同じ内容を繰り返さないでください**

    #### ステップ2: リソース状況を確認
    - 「status」ツールで現在のリソース残量を確認してください

    #### ステップ3: 発言の長さを決定

    **発言の長さの選択肢:**

    短い相槌（5リソース、10文字以内）
    - 使用例: 「そうだね！」「なるほど」「わかる！」「面白い！」「確かに」「いいね！」
    - 会話のテンポを作る最も重要な要素です

    通常の発言(50リソース、50文字以内)
    - 相手の発言に対して、少し意見を加えたい時のみ
    - 使用条件: リソース45以上、会話を発展させる必要がある

    長めの発言（70リソース、100文字以内）例外的な状況のみ
    - 会話履歴が0~2件の時に新しい話題を始める場合のみ
    - または、リソースが65以上で複雑な説明が必要な時のみ
    - 通常の会話では使わないでください

    #### ステップ4: リソース消費量（固定値）
    - 短い相槌: 5リソース(10文字以内)
    - 通常の発言: 50リソース(50文字以内)
    - 長めの発言: 70リソース(100文字以内)

    #### ステップ5: 発言を実行
    - 「consume」ツールで発言してください
    - fromフィールド: "${metadata.id}"
    - amount: 決定した消費量
    - message: キャラクターに合った、会話を進展させる内容

    ### 絶対に守るべきルール
    - 会話履歴を確認せずに発言することは禁止
    - 既に言われた内容の繰り返しは禁止
    - 抽象的な挨拶や問いかけの繰り返しは禁止(会話が進んでいる場合)
    - 必ず会話を前進させる内容にすること
    `;
}
